# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  component(relativePath: String): Component!
  componentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ComponentFilter): ComponentConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  page: PageFilter
  component: ComponentFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Component | Global | Folder

type PageBlocksContent {
  content: JSON
}

type PageBlocksBrandSlogan {
  title: String
  slogan: String!
  illustrationSvg: String
}

type PageBlocksNavCardsCards {
  title: String!
  description: String
  link: String!
}

type PageBlocksNavCards {
  cards: [PageBlocksNavCardsCards]
}

union PageBlocks = PageBlocksContent | PageBlocksBrandSlogan | PageBlocksNavCards

type Page implements Node & Document {
  title: String!
  description: String
  hideTitleAndDescription: Boolean
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksContentContentExamplesFilter {
  componentName: StringFilter
  exampleName: StringFilter
  showCodeByDefault: BooleanFilter
}

input PageBlocksContentContentFigmaPreviewsFilter {
  urls: StringFilter
}

input PageBlocksContentContentFigmaEmbedFilter {
  url: StringFilter
  hideBottomBar: BooleanFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ComponentBodyTableTableRowsTableCellsFilter {
  value: RichTextFilter
}

input PageBlocksContentContentTableTableRowsFilter {
  tableCells: ComponentBodyTableTableRowsTableCellsFilter
}

input PageBlocksContentContentTableFilter {
  firstRowHeader: BooleanFilter
  align: StringFilter
  tableRows: PageBlocksContentContentTableTableRowsFilter
}

input PageBlocksContentContentFilter {
  Examples: PageBlocksContentContentExamplesFilter
  FigmaPreviews: PageBlocksContentContentFigmaPreviewsFilter
  FigmaEmbed: PageBlocksContentContentFigmaEmbedFilter
  table: PageBlocksContentContentTableFilter
}

input PageBlocksContentFilter {
  content: PageBlocksContentContentFilter
}

input PageBlocksBrandSloganFilter {
  title: StringFilter
  slogan: StringFilter
  illustrationSvg: StringFilter
}

input PageBlocksNavCardsCardsFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
}

input PageBlocksNavCardsFilter {
  cards: PageBlocksNavCardsCardsFilter
}

input PageBlocksFilter {
  content: PageBlocksContentFilter
  brandSlogan: PageBlocksBrandSloganFilter
  navCards: PageBlocksNavCardsFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  hideTitleAndDescription: BooleanFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Component implements Node & Document {
  title: String!
  subtitle: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ComponentBodyExamplesFilter {
  componentName: StringFilter
  exampleName: StringFilter
  showCodeByDefault: BooleanFilter
}

input ComponentBodyFigmaPreviewsFilter {
  urls: StringFilter
}

input ComponentBodyFigmaEmbedFilter {
  url: StringFilter
  hideBottomBar: BooleanFilter
}

input ComponentBodyTableTableRowsFilter {
  tableCells: ComponentBodyTableTableRowsTableCellsFilter
}

input ComponentBodyTableFilter {
  firstRowHeader: BooleanFilter
  align: StringFilter
  tableRows: ComponentBodyTableTableRowsFilter
}

input ComponentBodyFilter {
  Examples: ComponentBodyExamplesFilter
  FigmaPreviews: ComponentBodyFigmaPreviewsFilter
  FigmaEmbed: ComponentBodyFigmaEmbedFilter
  table: ComponentBodyTableFilter
}

input ComponentFilter {
  title: StringFilter
  subtitle: StringFilter
  body: ComponentBodyFilter
}

type ComponentConnectionEdges {
  cursor: String!
  node: Component
}

type ComponentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ComponentConnectionEdges]
}

type GlobalHeaderNav {
  href: String!
  label: String!
  external: Boolean
  iconSvg: String
  iconBehaviour: String
}

type GlobalHeader {
  shortHeader: Boolean
  nav: [GlobalHeaderNav]
}

type GlobalFooterLinks {
  href: String!
  label: String!
  iconSvg: String
}

type GlobalFooter {
  copyright: String!
  links: [GlobalFooterLinks]
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
  external: BooleanFilter
  iconSvg: StringFilter
  iconBehaviour: StringFilter
}

input GlobalHeaderFilter {
  shortHeader: BooleanFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterLinksFilter {
  href: StringFilter
  label: StringFilter
  iconSvg: StringFilter
}

input GlobalFooterFilter {
  copyright: StringFilter
  links: GlobalFooterLinksFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateComponent(relativePath: String!, params: ComponentMutation!): Component!
  createComponent(relativePath: String!, params: ComponentMutation!): Component!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentUpdateMutation {
  page: PageMutation
  component: ComponentMutation
  global: GlobalMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  component: ComponentMutation
  global: GlobalMutation
}

input PageBlocksContentMutation {
  content: JSON
}

input PageBlocksBrandSloganMutation {
  title: String
  slogan: String
  illustrationSvg: String
}

input PageBlocksNavCardsCardsMutation {
  title: String
  description: String
  link: String
}

input PageBlocksNavCardsMutation {
  cards: [PageBlocksNavCardsCardsMutation]
}

input PageBlocksMutation {
  content: PageBlocksContentMutation
  brandSlogan: PageBlocksBrandSloganMutation
  navCards: PageBlocksNavCardsMutation
}

input PageMutation {
  title: String
  description: String
  hideTitleAndDescription: Boolean
  blocks: [PageBlocksMutation]
}

input ComponentMutation {
  title: String
  subtitle: String
  body: JSON
}

input GlobalHeaderNavMutation {
  href: String
  label: String
  external: Boolean
  iconSvg: String
  iconBehaviour: String
}

input GlobalHeaderMutation {
  shortHeader: Boolean
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterLinksMutation {
  href: String
  label: String
  iconSvg: String
}

input GlobalFooterMutation {
  copyright: String
  links: [GlobalFooterLinksMutation]
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
