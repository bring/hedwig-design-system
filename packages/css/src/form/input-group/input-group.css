@import url("../../_icons.css");

.hds-input-group {
  --hds-input-group-background-color: var(--hds-ui-colors-white);

  /* Modifier: White */
  &.hds-input-group--white {
    --hds-input-group-background-color: var(--hds-ui-colors-white);
  }

  display: flex;
  flex-flow: column nowrap;
  gap: var(--hds-spacing-4);

  /* State: Error */
  &.hds-input-group--error {
    .hds-input-group__input-wrapper,
    .hds-input-group__input-wrapper:has(
      input.hds-input-group__input:read-only,
      textarea.hds-input-group__input:read-only
    ),
    .hds-input-group__input-wrapper[data-readonly="true"] /* Fallback for :has */,
    .hds-input-group__input-wrapper:has(
      input.hds-input-group__input:read-only,
      textarea.hds-input-group__input:read-only):focus-within {
      border-color: var(--hds-posten-colors-dark-red);
    }
  }

  & .hds-input-group__label {
    font: var(--hds-typography-body-title);
  }

  /*
    Make the entire disabled input group appear faded
    Including the label, border and text color
  */
  &:has(input.hds-input-group__input:disabled, textarea.hds-input-group__input:disabled) {
    opacity: 0.5;
  }

  &:has(
      input.hds-input-group__input:read-only:not(:disabled),
      textarea.hds-input-group__input:read-only:not(:disabled)
    )
    .hds-input-group__label {
    display: flex;
    gap: var(--hds-spacing-4);

    &::before {
      content: "";
      display: inline-block;
      margin-top: calc(var(--hds-spacing-4) / 2);
      width: var(--hds-spacing-24);
      height: var(--hds-spacing-24);
      background-color: var(--hds-ui-colors-black);
      mask-image: var(--_hds-lock);
    }
  }

  & .hds-input-group__input-wrapper {
    background-color: var(--hds-input-group-background-color);
    display: flex;
    flex-flow: row nowrap;
    width: 100%;
    border: var(--hds-stroke-default) solid var(--hds-ui-colors-dark-grey);
    border-radius: var(--hds-border-radius-8);
    transition-duration: var(--hds-micro-animation-duration-quick);
    transition-timing-function: var(--hds-micro-animation-easing-normal);
    transition-property: border-color;
    box-sizing: border-box;

    /* State: Focus */
    &:focus-within,
    &:has(input.hds-input-group__input:read-only, textarea.hds-input-group__input:read-only):focus-within,
    &[data-readonly="true"]:focus-within /* Fallback for :has */ {
      border: var(--hds-stroke-thick) solid var(--hds-colors-signature);

      /* Since the border size increases when focused, we offset the added height by decreasing the input height and padding */
      & .hds-input-group__input {
        height: calc(
          var(--hds-spacing-16) * 2 + var(--hds-line-height-body-small-min) -
            var(--hds-stroke-thick)
        );
        padding: calc(var(--hds-spacing-16) - var(--hds-stroke-default));
      }
    }

    /* State: Read only */
    &:has(
      input.hds-input-group__input:read-only:not(:disabled),
      textarea.hds-input-group__input:read-only:not(:disabled)
    ),
    &[data-readonly="true"] /* Fallback for :has */ {
      background-color: var(--hds-ui-colors-light-grey-fill);
    }
  }

  & .hds-input-group__input {
    color: var(--hds-ui-colors-black);
    width: 100%;
    padding: var(--hds-spacing-16);
    font: var(--hds-typography-body);
    line-height: normal;
    border: 0;
    background: transparent;

    &::placeholder {
      color: var(--hds-ui-colors-dark-grey);
    }

    &:focus {
      outline: 0;

      &::placeholder {
        color: var(--hds-ui-colors-grey);
      }
    }

    &:read-only:focus::placeholder {
      color: var(--hds-ui-colors-dark-grey);
    }
  }
}
